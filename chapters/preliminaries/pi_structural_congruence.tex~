% mainfile: ../../Refinement.tex
The $\alpha$-convertibility relation identifies all processes $P$ and $Q$ where $P$ can be obtained from $Q$ by a renaming of bound names. We now extend this relation, to gain the so-called \findex{structural congruence}.

\input{./images/def_struct_cong}

\begin{definition}[Structural congruence]
\label{def_struct_cong}
The smallest congruence, denoted by $\struct{}\subseteq\procs\times\procs$, which satisfies the axioms of \refFig{fig_def_struct_cong}, is called \findex{structural congruence}.
\end{definition}

The (\ref{sc_res-par}) axiom is normally known as \findex{scope extrusion}. With the added (\ref{sc_res-pre}) and (\ref{sc_res-sum}) axioms, we now have the ability to extrude the scope in two more ways. Besides, note that within these three rules the side condition that the name $a$ is not allowed to appear free in the other part, is by \refConv{conv_uni_bn} the same as the name $a$ is not allowed to appear in the other part at all.

Milner's well-known \findex{standard form} \cite{milner} expands the scope of a restriction as much as possible. We added in \refFig{fig_def_struct_cong} the (\ref{sc_res-pre}) and (\ref{sc_res-sum}) axioms to Milner's structural congruence so that it is now possible to move \emph{all} restrictions right at the front of a process.

\begin{definition}[Extended standard form]
\label{def_extended_standard_form}
A process $P\in\procs$ with
\[P\define\procres[()]{\vec{z}}{\procpar{P_1}{\procpar{\ldots}{P_n}}}\]
and $\vec{z}\subseteq\names$ and $n\in\N$ is said to be in \index{standard form!extended}\findex{extended standard form}, if $P_1,\ldots,P_n\in\procsresf$. If $\vec{z}$ is an empty sequence, we omit the restriction operator and if $n=0$ then the form of the process is $P=\procres{\vec{z}}{\proczero}$. The set of all processes in extended standard form is denoted by $\procsesf$.
\end{definition}

Thus, if we consider a process $P\define\procchoice{\inp{a}{x}.\out{x}{a}}{\inp{z}{x}.\procres{y}{\out{x}{y}}}$, we know that referring to Milner, $P$ is in standard form. But with the (\ref{sc_res-pre}) and (\ref{sc_res-sum}) axioms we can get rid of the restriction operator inside the process and move it to the front. Hence, $P\struc\procchoice{\inp{a}{x}.\out{x}{a}}{\procres[()]{y}{\inp{z}{x}.\out{x}{y}}}\struc\procres[()]{y}{\procchoice{\inp{a}{x}.\out{x}{a}}{\inp{z}{x}.\out{x}{y}}}$. Thereby, we see the necessity of the slightly adapted version of the guarded choice within the syntax of the \picalc{}. For the intermediate step it is necessary that the parts of a sum can also start with a restriction and not only with a prefix. In general, the intermediate steps during a transformation of a process in extended standard form is the only reason for extending the syntax.

Moreover, it is possible to transform every process with the axioms of \refFig{fig_def_struct_cong} to a structurally congruent process in extended standard form.

\begin{lemma}[Extended standard form]
\label{lem_extended_standard_form}
Every process $P\in\procs$ can be transformed in a process $P'\in\procsesf$, with $\struct{P}{P'}$.
\end{lemma}
\begin{prf}
Let $P\in\procs$. We proceed by induction over the structure of processes.
\begin{description}
\item[Base case $P=\proczero$:] By the (\ref{sc_res-abs}) axiom of \refFig{fig_def_struct_cong}, we know $\struct{P}{\procres[()]{a}{\proczero}}$ holds for an arbitrary $a\in\names$. And with the definition of the extended standard form $\procres[()]{a}{\proczero}\in\procsesf$ holds.%We know that $P\in\procsesf$ holds, because with $n=0$ and $\vec{z}$ the empty sequence, $P=\procres[()]{\vec{z}}{\procpar{P_1}{\procpar{\ldots}{P_n}}}$ holds. Since the structural congruence is reflexive, we also know that $P\struct{}P$ holds

\item[Base case $P=\proccall{A}{\vec{v}}$:] With $\vec{z}$ the empty sequence and since then the restriction operator is omitted according to \refDef{def_extended_standard_form}, we know $P=\procres{\vec{z}}{\proccall{A}{\vec{v}}}$. Hence, since the structural congruence is reflexive $\struct{P}{P}$ and since $\proccall{A}{\vec{v}}\in\procsresf$, we know $P\in\procsesf$.

\item[Induction hypothesis:] For all structurally simpler $Q,R\in\procs$ there exist processes $Q',R'\in\procsesf$ with $Q\struct{}Q'$ and $R\struct{}R'$.

\item[Induction step:] Let $Q,R\in\procs$.
	\begin{description}		
\item[Case $P=\procpar{Q}{R}$:] From the induction hypothesis we know that there are processes $Q',R'\in\procsesf$ with $Q\struct{}Q'$ and $R\struct{}R'$. So there are sequences $\vec{z_1},\vec{z_2}\subseteq\names$ and processes $Q_1,\ldots,Q_n,R_1,\ldots,R_m\in\procsresf$ with $n,m\in\N$, such that $Q'\define\procres[()]{\vec{z_1}}{\procpar{Q_1}{\procpar{\ldots}{Q_n}}}$ and $R'\define\procres[()]{\vec{z_2}}{\procpar{R_1}{\procpar{\ldots}{R_m}}}$ holds. Since there is just a finite number of free names in a collection of processes, we can choose names $\vec{z_1'},\vec{z_2'}\subseteq{}\names$, with $\card{\vec{z_1'}}=\card{\vec{z_1}}$ and $\card{\vec{z_2'}}=\card{\vec{z_2}}$ such that for all names $x\in\vec{z_1'}$ it holds that
\[x\nin\left(\fn{\procpar{Q_1}{\procpar{\ldots}{Q_n}}}\cup\fn{\procpar{R_1}{\procpar{\ldots}{R_m}}}\cup{}z_2'\right)\]
and similarly $x'\nin\left(\fn{\procpar{Q_1}{\procpar{\ldots}{Q_n}}}\cup\fn{\procpar{R_1}{\procpar{\ldots}{R_m}}}\cup{}z_1'\right)$ holds for all names $x'\in\vec{z_2'}$. Since the structural congruence is preserved under $\alpha$-conversion, we know that $Q'\struct{}\procres[()]{\vec{z_1'}}{\left(\procpar{Q_1}{\procpar{\ldots}{Q_n}}\right)\subs{\vec{z_1'}}{\vec{z_1}}}$ and $R'\struct{}\procres[()]{\vec{z_2'}}{\left(\procpar{R_1}{\procpar{\ldots}{R_m}}\right)\subs{\vec{z_2'}}{\vec{z_2}}}$ holds. From the definition of the substitution on processes, we know that there are processes $Q_1',\ldots,Q_n'\in\procsresf$ and $R_1',\ldots,R_m'\in\procsresf$ with $Q_i'\define{}Q_i\subs{\vec{z_1'}}{\vec{z_1}}$ for all $i\in\set{1,\ldots,n}$ and $R_j'\define{}R_j\subs{\vec{z_2'}}{\vec{z_2}}$ for all $j\in\set{1,\ldots,m}$. Hence, there are processes $Q'',R''\in\procsesf$ with $Q''\define{}\procres[()]{\vec{z_1'}}{\procpar{Q_1'}{\procpar{\ldots}{Q_n'}}}$ and $R''\define{}\procres[()]{\vec{z_2'}}{\procpar{R_1'}{\procpar{\ldots}{R_m'}}}$. Since the structural congruence is transitive, we know that $Q\struct{}Q''$ and $R\struct{}R''$ holds. Furthermore, we know with the (\ref{congparr}) implication of \refDef{def_cong_rel} that $\procpar{Q}{R}\struct{}\procpar{Q''}{R}$ and with (\ref{congparl}) that $\procpar{Q''}{R}\struct{}\procpar{Q''}{R''}$ holds. Hence, with the transitivity of the structural congruence $\procpar{Q}{R}\struct{}\procpar{Q''}{R''}$ holds. Thus, consider $\procpar{Q''}{R''}=\procpar{\procres[()]{\vec{z_1'}}{\procpar{Q_1'}{\procpar{\ldots}{Q_n'}}}}{\procres[()]{\vec{z_2'}}{\procpar{R_1'}{\procpar{\ldots}{R_m'}}}}$. Since there is no $x\in\vec{z_2'}$ with $x\in\fn{Q''}$, we know from the (\ref{sc_res-par}) axiom of \refFig{fig_def_struct_cong} that $\procpar{Q''}{R''}\struct{}\procres[()]{\vec{z_2'}}{\procpar{Q''}{\left(\procpar{R_1'}{\procpar{\ldots}{R_m'}}\right)}}$. Moreover, with (\ref{sc_par-com}) and (\ref{sc_res-par}), we also know $\procpar{Q''}{R''}\struct{}\procres[()]{\vec{z_1'}}{\procres[()]{\vec{z_2'}}{\procpar{\left(\procpar{Q_1'}{\procpar{\ldots}{Q_n'}}\right)}{\left(\procpar{R_1'}{\procpar{\ldots}{R_m'}}\right)}}}$, since the definition of the congruence relation yields that the axioms are also applicable in the context of a restriction. Hence, we found a process $P'\in\procsesf$ with $P'\define{}\procres[()]{\vec{z_3}}{\procpar{\procpar{Q_1'}{\procpar{\ldots}{Q_n'}}}{\procpar{R_1'}{\procpar{\ldots}{R_m'}}}}$ with $\vec{z_3}=\vec{z_1'}\cup\vec{z_2'}$ and $P\struct{}P'$.
	
\item[Case $P=\pi.Q$:] Again the induction hypothesis yields that there are names $z\subseteq\names$ and processes $Q_1,\ldots,Q_n\in\procsresf$, with $n\in\N$, such that $Q\struct{}\procres[()]{\vec{z}}{\procpar{Q_1}{\procpar{\ldots}{Q_n}}}$. Additionally, we can find fresh names $\vec{z'}\subseteq\names$, with $\card{\vec{z'}}=\card{\vec{z}}$ such that for all $x\in{}\vec{z'}$, we know that $x\nin\fn{\pi}$ and $x\nin\fn{\procpar{Q_1}{\procpar{\ldots}{Q_n}}}$ holds. And with the (\ref{sc_alpha}) axiom of \refFig{fig_def_struct_cong} we know $Q\struct{}\procres[()]{\vec{z'}}{\left(\procpar{Q_1}{\procpar{\ldots}{Q_n}}\right)\subs{\vec{z'}}{\vec{z}}}$ holds. Thus, with $Q_i'\define{}Q_i\subs{\vec{z'}}{\vec{z}}$ for all $i\in\set{1,\ldots,n}$, we know $Q\struct{}\procres[()]{\vec{z'}}{\procpar{Q_1'}{\procpar{\ldots}{Q_n'}}}$ and so with the (\ref{congsum1l}) implication of \refDef{def_cong_rel}, we know $P=\struct{\pi.Q}{P'}$, with $P'\define\pi.\procres[()]{\vec{z'}}{\procpar{Q_1'}{\procpar{\ldots}{Q_n'}}}$. Furthermore, with the (\ref{sc_res-pre}) axiom of \refFig{fig_def_struct_cong} we know $
\struct{P'}{P''}$, with $P''\define\procres[()]{\vec{z'}}{\pi.\left(\procpar{Q_1'}{\procpar{\ldots}{Q_n'}}\right)}$. Hence, by transitivity of the structural congruence, there is a process $P''\in\procsesf$ with $P\struct{}P''$.

\item[Case $P=\procres{a}{Q}$:] Since there is a $Q'\in\procsesf$ with $\struct{Q}{Q'}$ due to the induction hypothesis, we know with \ref{congres} of \refDef{def_cong_rel} that $\struct{P}{\procres{a}{Q'}}$ holds. Furthermore, we know $\procres{a}{Q'}$ itself is in extended standard form, since $Q'\in\procsesf$ holds.

\item[Case $P=\procchoice{Q}{R}$:] The induction hypothesis yields that there are processes $Q',R'\in\procsesf$ with $\struct{Q}{Q'}$ and $\struct{R}{R'}$ and so there exists $\vec{z_1},\vec{z_2}\subseteq\names$ and $Q_1,\ldots,Q_n,R_1,\ldots,R_m\in\procsresf$ with $m,n\in\N$ such that $Q'=\procres[()]{\vec{z_1}}{\procpar{Q_1}{\procpar{\ldots}{Q_n}}}$ and $R'=\procres[()]{\vec{z_2}}{\procpar{R_1}{\procpar{\ldots}{R_m}}}$. From the definition of the syntax of the \picalc{} processes we know $Q,R\in\sums$, otherwise $P$ would not be a process. Hence, $Q$ and $R$ are each either an inaction, an input process, a choice process, or a restricted sum. Furthermore, we know that for all $M\in\sums$ and $P\in\procs$ that $\struct{M}{P}$ implies $P\in\sums$, since the only rules of the structural congruence, which influence the structure of a process significantly to possibly destroy the sum structure, are the (\ref{sc_res-pre}), (\ref{sc_res-sum}) and (\ref{sc_res-par}) axioms of \refFig{fig_def_struct_cong}. And since the (\ref{sc_res-pre}) and (\ref{sc_res-sum}) axioms preserve the sum structure and (\ref{sc_res-par}) is not applicable for sums, we know that $Q',R'\in\sums$. Thus, there are $M_1,M_2\in\sums\cap\procsresf$ such that $Q'=\procres{\vec{z_1}}{M_1}$ and $R'=\procres{\vec{z_2}}{M_2}$.

Analogously to the case of the parallel composition, we know that we can use $\alpha$-conversion to ensure that all bound names are different from each other and from all the other names and preserve the structural congruence. Thus, there are fresh names $\vec{z_1'},\vec{z_2'}\subseteq\names$ which do not appear free in any process under consideration with $Q'\struc{}\procres{\vec{z_1'}}{M_1'}$ and $R'\struc{}\procres{\vec{z_2'}}{M_2'}$ for some $M_1',M_2'\in\sums$ with $M_1'\define{}M_1\subs{\vec{z_1'}}{\vec{z_1}}$ and $M_2'\define{}M_2\subs{\vec{z_2'}}{\vec{z_2}}$. The transitivity of the structural congruence yields that $\struct{Q}{\procres{\vec{z_1'}}{M_1'}}$ and $\struct{R}{\procres{\vec{z_2'}}{M_2'}}$ holds. Since $\procres{\vec{z_1'}}{M_1'},\procres{\vec{z_2'}}{M_2'}\in\sums$ and since $\struc$ is a congruence and accordingly is preserved for every context, we know that $P\struct{}\procchoice{\procres[()]{\vec{z_1'}}{M_1'}}{\procres[()]{\vec{z_2'}}{M_2'}}$. Thus, with the (\ref{sc_res-sum}) axiom of \refFig{fig_def_struct_cong} we know $\struct{P}{\procres[()]{\vec{z_2''}}{\procchoice{\procres[()]{z_1''}{M_1'}}{M_2}}}$ holds. The (\ref{sc_sum-com}) and the (\ref{sc_res-sum}) axiom of \refFig{fig_def_struct_cong} and the (\ref{congsum2l}) implication of \refDef{def_cong_rel} yields that $\struct{P}{P'}$ with $P'\define{}\procres[()]{\vec{z_2'}}{\procres[()]{\vec{z_1'}}{\procchoice{M_2'}{M_1'}}}$ holds and so $P'\in\procsesf$.
	\end{description}
\end{description}
\end{prf}

Thus, we know that we are able to transform every process in a structurally congruent process which has all the restrictions right at the front of the process.
