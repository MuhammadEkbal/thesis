% mainfile: ../../Refinement.tex
We already explained the intuition of the semantics of the \picalc{} in \refSec{sec_pi_syntax}. In this section we formalize this intuition by presenting a definition of an \index{semantics!operational}\findex{operational semantics} of the \picalc{}. This definition yields a labeled transition system called the \index{transition system!early}\findex{early transition system} as presented in \cite{sangiorgi} in Table 1.5 on page 38. For this thesis, we applied only minor changes to the original presentation. %one presented in \cite{sangiorgi} for the fitting in this thesis.
In particular, we replace the replication rules by the \ecall{} rule, which is also defined in \cite{sangiorgi}, and omit the matching rule due to the definition of our syntax. Furthermore, the labels of the transitions are adapted to the notion of this thesis.

\subsubsection{Definition}
For the labeling of the transitions, we define the set of all \index{action!output}\findex[output!action]{output actions} as $\outA\define\set[x,y\in\names]{\out{x}{y}}$, the set of all \index{action!input}\findex[input!action]{input actions} as $\inA\define\set[x,y\in\names]{\inpa{x}{y}}$ and the set of all \index{action!bound output}\findex[bound output action]{bound output actions} as $\boutA\define\set[\exists{}x,y\in\names:x\neq{}y]{\bout{x}{y}}$. The meaning of the bound output will be explained shortly. Thus, the set of all \index{action}\findex[action]{actions} is defined as $\actions\define\inA\cup\outA\cup\boutA\cup\set{\tau}$ with $\alpha,\beta,\ldots\in\actions$ as its standard representatives.

Furthermore, we expand the definition of the \index{name!free}\findex[free name!action]{free} and \index{name!bound}\findex[bound name!action]{bound names} of processes in \refFig{fig_names_act} such that they are also applicable to actions. Additionally, \refFig{fig_names_act} shows the application of a \findex[substitution!action]{substitution on actions} and the \findex{conjugation}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% START SOME OLD DEFINITIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{old}{some old definitions}
\todo{and is based on an early transition system Sangiorgi defined in his phd thesis in $1993$ \cite{sangiorgi_phd}}
\todo{to the best of our knowledge developed by Sangiorgi in its phd thesis, zitat paper das Milner das auch schon machen wollte und sein subvisor war}
\begin{description}
\item[Labels:] $\lambda, \mu, \ldots \in \labels = \set[x,y\in\names]{\inp{x}{y}} \cup \set[x,y\in\names]{\out{x}{y}}$
\item[Actions:] $\alpha, \beta, \ldots \in \actions = \labels \cup \set{\tau}$
\item[Syntax:] $P \syntdef \procsum \ebnf \procpar{P_1}{P_2} \ebnf \procres{x}{P} \ebnf \proccall{A}{\parl{w}}$ with $I$ finite indexset.
\item[Fragments:] $F\syntdef\procsum \ebnf \proccall{A}{\parl{w}} \ebnf \procres[e]{a}{\procpar{F_1}{\procpar{\ldots}{F_n}}}$ with $a\in fn(F_i)$ f.a. $i\in\set{1,\ldots,n}$, $I$ finite indexset, $\mid I\mid\neq0$.
\item[Restricted form:] $P_{\text{rf}}\syntdef \Pi_{i\in J} F_i$ with $J$ finite indexset and $F_i$ fragment f.a. $i\in J$.
\end{description}
\end{old}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% END SOME OLD DEFINITIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{figure}[!h]
\centering
\begin{tabular}{c|l|c|c|c|c|c}%|c|c|c}
$\alpha$      & denotation   & $\n{\alpha}$ & $\bn{\alpha}$ & $\fn{\alpha}$ & $\substF(\alpha)$ & $\conj{\alpha}$\\\hline\hline%& $\alpha\subs{y}{a}$ & $\alpha\subs{y}{x}$ & $\alpha\subs{y}{z}$\\\hline\hline
$\tau$        & internal     & $\emptyset$  & $\emptyset$   & $\emptyset$   & $\tau$ & $\tau$\\%& $\tau$              & $\tau$        & $\tau$ \\
$\inpa{a}{x}$  & input        & $\set{a,x}$  & $\emptyset$   & $\set{a,x}$   & $\inpa{\substF(a)}{\substF(x)}$ & $\outa{a}{x}$\\%& $\inp{y}{x}$        & $\inp{a}{x}$  & $\inp{a}{x}$ \\
$\out{a}{x}$  & output       & $\set{a,x}$  & $\emptyset$   & $\set{a,x}$   & $\out{\substF(a)}{\substF(x)}$ & $\inpa{a}{x}$\\%& $\out{y}{x}$        & $\out{a}{y}$  & $\out{a}{x}$ \\
$\bout{a}{x}$ & bound output & $\set{a,x}$  & $\set{x}$     & $\set{a}$     & $\bout{\substF(a)}{x}$ & $\inpa{a}{x}$ %& $\bout{y}{x}$       & $\bout{a}{x}$ & $\bout{a}{x}$
\end{tabular}
\caption{Free and bound names of actions.}
\label{fig_names_act}
\end{figure}

It seems to be a bit unintuitive that the set of bound names of an input action $\inpa{a}{x}$ is empty, since in the view of processes the name $x$ is bound. But with the intuition that the actions present the behavior a process has performed, we see that the name $x$ has already been sent over the channel $a$ and is not a placeholder any longer. This fits to the definition of the operational semantics in \refFig{fig_ts_early}, where we see that a bound name in an input prefix is instantiated directly when the input transition is inferred. This principle is called an \index{instantiation!early}\findex{early instantiation}.

To abstract from the replacement of bound names, we define the transition relation on the equivalence classes modulo $\alpha$-converti"-bility of processes with the actions as its labels.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% START OLD DESCRIPTION TEXT %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{old}{some old description text}
In this section we introduce an operational semantics for \picalc{} processes. The desired manner of this semantics\todo{not good, is backward description.} is, that the behavior of a process -- meaning the internal as well as the external behavior -- is completely represented. With attention to the denotational semantics presented in \refChap{sec_de_semantics} it is also helpful that the semantics consists of a transition system which has all the processes behavior decoded in the labels of its transitions.

Below the \index{transition system!early}\findex{early transition system} for \picalc{} processes developed by Sangiorgi and Walker in \cite{sangiorgi} is defined and explained. Due to a better fitting in this thesis the notation of the early transition system is somewhat modified.

Primarily the rules for replication used in \cite{sangiorgi} are replaced by the rule for recursive calls, due to the fact that in this thesis no replication operator is defined and -- as mention in \cite{milner} -- replication and recursive calls are equivalent. Moreover the rule for matching is omitted by the same fact and obviously the labels of the transitions are adapted to the notion of this thesis. Furthermore in \cite{sangiorgi} processes are seen as equivalence classes modulo $\alpha$-conversion (compare \refDef{def_alpha_conv}), in this thesis we will -- in attention to \refChap{sec_reduc_semantics} -- explicitly differentiate between a process $P$ and its equivalence class $\ec{P}$.

All this leads to the semantically equivalent transition system presented in \refDef{def_early_trans_system}.
\end{old}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% END OLD DESCRIPTION TEXT %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{definition}
\label{def_early_trans_system}
The relation $\set[\alpha\in\actions]{\transs{\alpha}}\subseteq\procs_\alpha\times\procs_\alpha$ is called the \index{transition system!early}\findex{early transition system} and is defined by the rules in \refFig{fig_ts_early} apart from the omission of the rules \esumr{}, \eparr{}, \ecomr{} and \ecloser{} for a shorter presentation. They can be obtained from their related rules by interchanging the roles of $P$ and $Q$.
\end{definition}

\input{./images/transitionsystems/ts_sangiorgi_early}

The labeled transition system fulfills two main tasks. On the one hand, it defines the activity within the process and on the other hand it exhibits the process' potential to interact with its environment.

Thereby, the internal behavior is represented by $\tau$ transitions, that is $\ec{P}\tautrans{}\ec{Q}$ expresses that $P$ and all processes $\alpha$-convertible to $P$ can invisibly evolve to $Q$ and to all processes which are $\alpha$-convertible to $Q$. For the external behavior there is a transition labeled with $\inpa{a}{x}$ for an input possibility, $\out{a}{x}$ for an output potential and the so-called bound output $\bout{a}{x}$, to handle the transfer of a name $x$ which is bound under the restriction. The intuition of a visible transition of a process is that we can compose another process with a corresponding visible transition in parallel and the composed processes can communicate with each other.

Note that we abbreviate multiple transitions like for example $\ec{\inp{a}{b}.\out{b}{c}}\intrans{a}{d}\ec{\out{d}{c}}$ and $\ec{\out{d}{c}}\outtrans{d}{c}\ec{\proczero}$ by $\ec{\inp{a}{b}.\out{b}{c}}\intrans{a}{d}\ec{\out{d}{c}}\outtrans{d}{c}\ec{\proczero}$.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% START OLD DESCRIPTION TEXT %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{old}{some old description text}
As mentioned, the hole transition system is build upon equivalence classes modulo $\alpha$-conversion. Thus, for a process $\inp{a}{z}.P$, with $P\in\procs$, the axiom $E-IN$ produces just because of the equivalence class, any number of transitions; one $\intrans{a}{x}$ for every channel $x\in\names\setminus\fn{P}$. In contrast to the late transition system -- also defined by Sangiorgi and Walker in \cite{sangiorgi} -- the missing transitions $\intrans{a}{y}$ for every channel $y\in\fn{P}$ are, as well as the former mentioned transitions, obtained by the rule and its substitution. Due to that, there is no need for a substitution in the conclusion and different names transmitted inside the premise of the \ecoml{} (respectively \ecomr{}) rule -- the standard rule for communication between two parallel processes --, because for every given output, there is, if possible, an associated deduction with the \ein{} rule.

Due to that, there is no need for a substitution in this rule. With this in mind, the substitution inside the $L-COM_L$ (respectively $L-COM_R$) rule, the standard rule for communication between two parallel processes, seems to be useless. It appears to be sufficient just allowing a communication between processes, where one can send a name over a channel and the other can receive the same name over the same channel and omitting the substitution. 

A main challenge while defining an operational semantics for \picalc{} processes is the treatment of bound names within a process. Four cases have to be considered. In the first case the bound name does not occur in the action of a transition. Then the restriction does not have any influence on the communication. Thus, the transition is just the same with or without restriction. This case is handled with the \eres{} rule.

If we consider $P\define\procres{a}{\inp{a}{x}.\proczero}$, we know the channel $a$ should locally be bound to the process $P$. Hence, there must not be a transition for the channel $a$, since a visible action stands for a possible communication of the process $P$ with its environment. Thus, for a communication of $P$ with its environment the channel $a$ must be known to the environment and so will not be local for $P$. Hence, no rule exists for this situation and with the side conditions $z\not\in\n{\alpha}$ in \eres{} and $z\neq x$ in \eopen{} this situation is excluded from the other rules.

\todo{It is not necessary to consider the case in which the restriced ... indepently, because ....}The case in which the restricted name is part of the input action -- for example $P\define\procres{a}{\inp{x}{a}.\proczero}$ -- is not necessary to be considered independently, because $P\in\ec{\procres{b}{\inp{x}{a}.\proczero}}$, hence every behavior is already regarded with the \eres{} rule. Otherwise it is either way not meaningful to define such a process in that way, because the ``$\procres{}{}$'' has no influence on the behavior of $P$, since $P\equiv\inp{x}{a}$. The focus on equivalence classes modulo $\alpha$-conversion instead of structural congruence makes it, however, necessary to consider it separately.

The most complicated case, which handles the transmission of bound names, is solved with the \eopen{} and \eclosel{} (respectively \ecloser{}) rule. For the external behavior as well as for the premise of the \eclosel{} rule, the \eopen{} rule is invented. There, the possibility for a hand over of a bound name is given. To distinguish between a normal and a bound output the parenthesis of the action are change angle bracket\todo{????}. It is necessary to mention that the conclusion omits the $\procres{}{}$-operator after the transition -- giving the rule the name ``open'' --, because without it, there could be no transition after a bound output to describe the full external behavior of a process. For example, consider the process $P\define \procres[klammer]{z}{\out{x}{z}.\inp{z}{w}.\proczero}$. Without the omission  of the ``$\procres{}{}$'' the external behavior of $P$ looks like

\[\ec{P}\bouttrans{x}{z}\ec{\procres[a]{z}{\inp{z}{w}.\proczero}}\nxrightarrow{}.\]

Thus, there is a deadlock after the bound output action $\bout{x}{z}$, but with a suitable parallel process, for example $Q\define\inp{x}{y}.\out{y}{a}.\proczero$, there should be more behavior possible: With the \eclosel{} and then \ecomr{} rule as last deductions, it holds

\[\ec{\procpar{P}{Q}}\tautrans\ec{\procres[a]{z}{\procpar{\inp{z}{w}.\proczero}{\out{z}{a}.\proczero}}}\tautrans\ec{\procres[a]{z}{\procpar{\proczero}{\proczero}}}.\]

On the way to reach this deductions, it is necessary that $P$ can perform $\ec{P}\bouttrans{x}{z}\ec{P'}\intrans{z}{a}\ec{\proczero}$, which is possible by omitting the ``$\procres{}{}$'' so that\todo{was will ich hier} $P'\define\procres[a]{z}{\inp{z}{w}.\proczero}$. Hence, $P$ can fully communicate with $\ec{Q}\intrans{x}{z}\ec{\out{z}{a}.\proczero}\outtrans{z}{a}\ec{\proczero}$.

The omission does not construct too much behavior, because the external behavior of a process $P$ means that an other process has to communicate with $P$. Hence, for a bound output like $\bout{x}{z}$, there has to be an input like $\inp{x}{z}$ and the only rule which handles this is the \eclosel{} (respectively \ecloser{}) rule, and this ``closes'' again in its conclusion the parallel process under the $\procres$-operator. Thus, another perception of this behavior is that those open and close rules handle a kind of scope expansion.

The side condition of the \eclosel{} (respectively \ecloser{}) rule is necessary because considering $P\define\procres[a]{z}{\out{x}{z}.\proczero}$ and $Q\define\inp{x}{a}.\out{z}{a}.\proczero$ then $\ec{P}\bouttrans{x}{z}\ec{\proczero}$ and $\ec{Q}\intrans{x}{z}\ec{\out{z}{z}.\proczero}$. Hence, without the $z\not\in\fn{Q}$ side condition $\ec{\procpar{P}{Q}}\tautrans\ec{\procres[a]{z}{\procpar{\proczero}{\out{z}{z}.\proczero}}}$ holds. This should not be allowed, because after this communication, the former unbound output channel $z$ is now bound; which is not the desired manner. Another perception is, that with $\procpar{P}{Q}=\procpar{\procres[a]{z}{\out{x}{z}.\proczero}}{\inp{x}{a}.\out{z}{a}.\proczero}$ there is no way to expand the scope of $z$ because $z\in\fn{Q}$, thus, a communication must not take place.

As opposed to the \esuml{} (respectively \esumr{}) rule, which just forwards the single transitions of a process in an alternative, the \eparl{} (respectively \eparr{}) rule needs a condition to prevent unwanted behavior. For example, consider two processes $P\define\procres[klammer]{a}{\out{w}{a}.\inp{a}{w}}$ and $Q\define\out{a}{y}$. With \eout{} holds $\ec{\out{w}{a}.\inp{a}{w}}\outtrans{w}{a}\ec{\inp{a}{w}}$ and using this with \eopen{}, then $\ec{P}\bouttrans{w}{a}\ec{\inp{a}{w}}$ holds. Hence, $\ec{R}\bouttrans{w}{a}\ec{\inp{a}{w}}$ holds with $R\define\procres[klammer]{b}{\out{w}{b}.\inp{b}{w}}$, because $R$ is formed out of $P$ by just a change of bound names. Thus, $R\in\ec{P}$. Hence would there be no condition in \eparl{} then $\ec{\procpar{R}{Q}}=\ec{\procpar{\procres[klammer]{b}{\out{w}{b}.\inp{b}{w}}}{\out{a}{y}}}\bouttrans{w}{a}\ec{\procpar{\inp{a}{w}}{\out{a}{y}}}$. So the resulting process could communicate over the former just for $P$ known channel $a$. This undesired behavior is prevented by the condition $\bn{\bout{w}{a}}\cap\fn{Q}=\set{a}\neq\emptyset$ of the \eparl{} rule.

The rule \ecall{} handles the function call in the \picalc{} by a $\tau$-transition, so every function call ``costs'' one $\tau$-transition. This may seem a bit constructed for the modeling of problems outside of the area of computer science, but in the topic of programming it is more meaningful that a computer takes an intern step to work off a function call.
\end{old}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% END OLD DESCRIPTION TEXT %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

A main challenge while defining an operational semantics for \picalc{} processes is the treatment of bound names within a process and especially the treatment of the transmission of bound names. Therefore, we have to take a closer look upon the \eres{}, \eparl{} (respectively \eparr{}), \eopen{} and \eclosel{} (respectively \ecloser{}) rules. The other rules straightforwardly fit to the intuition described in \refSec{sec_pi_syntax}.

Thus, with the \esuml{} (respectively \esumr{}) rule an alternative either evolves to the process arisen from the left or from the right part of the sum, whereby the other part vanishes. Besides, there are only the \etau{}, \eout{} and \ein{} axioms to handle a prefix in the described manner. Note that there is no condition within the \ein{} rule for the reception of a name. Thus, \textit{any} name can be send to an input process. Due to that, it is enough to consider the case where the object of the input is equal to the object of the output transition within the premise of the \ecoml{} (respectively \ecomr{}) rule for a communication between two processes. For instance, consider $P\define\out{a}{b}$ and $Q\define\inp{a}{x}.\out{x}{x}$. Since $\ec{P}\outtrans{a}{b}\ec{\proczero}$ and there is also a transition $\intrans{a}{b}$ such that $\ec{Q}\intrans{a}{b}\ec{\out{b}{b}}$, the \ecoml{} rule infers $\ec{\procpar{\out{a}{b}}{\inp{a}{x}.\out{x}{x}}}\tautrans{}\ec{\procpar{\proczero}{\out{b}{b}}}$. Furthermore, note that in \refFig{fig_ts_early} there is no inference rule for the inaction. Hence, an inaction has no transition and thus, no behavior.

By investigating the \ecall{} rule, we notice that a function call is resolved by a $\tau$ transition, so every function call ``costs'' one transition. This may seem a bit constructed for the modeling of problems outside the area of computer science, but in the topic of programming it is sensible that a computer takes an internal step to compute a function call.

From the \eres{} rule we know that a restriction does not delimit the behavior of a process as long as the bound channel is not used to compute the behavior. With the side condition $z\nin\n{\alpha}$ within the \eres{} rule, we prevent a private channel to be visible for the environment. Consider, for example, $P\define{}\procres[()]
{a}{\procpar{\inp{a}{x}.\out{x}{c}}{\out{a}{b}.\inp{b}{d}}}$. The bound channel $a$ can only be used to communicate within its scope -- for instance $\ec{P}\tautrans{}\ec{\procres[()]{a}{\procpar{\out{b}{c}}{\inp{b}{d}}}}$ -- but there is no visible transition starting in $\ec{P}$. Otherwise, each of such transitions would uncover the bound channel to the environment.

By \refConv{conv_uni_bn} we know that we do not have to consider the case that the bound name is the object of an input prefix. But note that nevertheless for $P\define\procres[()]{a}{\inp{x}{y}.\out{y}{a}}$ there is a transition labeled with $\inpa{x}{a}$ inferred by the \eres{} rule and starting in $\ec{P}$, since, for example, $\procres[()]{b}{\inp{x}{y}.\out{y}{b}}\in\ec{P}$ holds. But we see that the name used as object of the transition's label can in general not be the bound name of the resulting process: $\ec{P}\intrans{x}{a}\ec{\procres[]{c}{\out{a}{c}}}$, but $\procres[]{a}{\out{a}{a}}\nin\ec{\procres[]{c}{\out{a}{c}}}$.

Intuitively, the open and close rules resemble the structural law of scope extrusion for parallel processes. Consider, for example, $P\define\procres[]{a}{\out{x}{a}.\inp{a}{y}}$ and $Q\define\inp{x}{b}.\out{b}{x}$. We know from \refFig{fig_def_struct_cong} that $\procpar{\procres[()]{a}{\out{x}{a}.\inp{a}{y}}}{Q}\struc\procres[()]{a}{\procpar{\out{x}{a}.\inp{a}{y}}{Q}}$ holds, since $a\nin\fn{Q}$. With the \ein{}, \eout{}, \ecoml{} and \eres{} rules we know $\ec{\procres[()]{a}{\procpar{\out{x}{a}.\inp{a}{y}}{Q}}}\tautrans\ec{\procres[()]{a}{\procpar{\inp{a}{y}}{\out{a}{x}}}}$ and we reach the same for $\ec{\procpar{P}{Q}}$ by using the \eout{}, \eopen{}, \ein{} and \eclosel{} rules, since $a\nin\fn{Q}$. Thus, $\ec{\procpar{P}{Q}}\tautrans\ec{\procres[()]{a}{\procpar{\inp{a}{y}}{\out{a}{x}}}}$. Consequently, we see on the one hand that the side condition within the \eclosel{} (respectively \ecloser{}) rule is essential to prevent communication between processes without possible scope extrusion and on the other hand that there is a need for a visible transition for a process sending a bound name. Concluding, we see the necessity of the omission of the restriction within the conclusion of the \eopen{} rule and the reintroduction within the \eclosel{} (respectively \ecloser{}) rule. Otherwise, no scope extrusion would be possible. But if we consider, for example, a similar handling of the restriction operator as in the \eres{} and \ecoml{} (respectively \ecomr{}) rules, $\ec{\procpar{P}{Q}}$ would reach $\ec{\procpar{\procres[()]{b}{\inp{b}{y}}}{\out{a}{x}}}$ which has a significant different behavior.

With the intuition that the visible transitions describe the communication possibilities for a parallel composed process, we gain another hint for the omission and reintroduction of the restriction. We already saw for the processes $P$ and $Q$ from above that $\ec{\procpar{P}{Q}}\tautrans\ec{\procres[()]{a}{\procpar{\inp{a}{y}}{\out{a}{x}}}}$ and so $\ec{\procpar{P}{Q}}\tautrans\ec{\procres[()]{a}{\procpar{\inp{a}{y}}{\out{a}{x}}}}\tautrans\ec{\procres[()]{a}{\procpar{\proczero}{\proczero}}}$ holds. Since $\ec{Q}\intrans{x}{a}\ec{\out{a}{x}}\outtrans{a}{x}\ec{\proczero}$, it fits that $\ec{P}\bouttrans{x}{a}\ec{\inp{a}{y}}\intrans{a}{x}\ec{\proczero}$ holds. By not omitting the restriction, the process would stuck in a deadlock ($\ec{\procres[]{a}{\inp{a}{y}}}$) after conducting the first transition. Furthermore, we know that we do not create unwanted behavior with this omission, since the only rules which handle a bound output are the \esuml{} (respectively \esumr{}), \eclosel{} (respectively \ecloser{}) and the \eparl{} (respectively \eparr{}) rules. Whereby, for the summation rules this policy does not have any relevance, since only one part will be chosen and the other is rendered void. Within the closing rules the resulting process is again restricted by the same bound name. Thus, this is just the scope extrusion and all unintended behavior is prevented by its side condition. Within the \eparl{} and the \eparr{} rule, which handle the interleaving behavior of both processes, the unwanted behavior is also excluded by the side condition. For example, consider $P\define\procres{a}{\out{b}{a}.\inp{a}{b}}$ and so $\ec{P}\bouttrans{b}{a}\ec{\inp{a}{b}}$. Without the side condition we could reach $\ec{\procpar{\inp{a}{b}}{\out{a}{b}}}$ with the bound output action $\bout{b}{a}$ from $\ec{\procpar{\procres[()]{d}{\out{b}{d}.\inp{d}{b}}}{\out{a}{b}}}$. Thus, we would identify a bound name with a free one.

\subsubsection{Names and substitution}
A closer look upon the \eopen{} rule yields that if there is a bound output transition, we can apply the \eopen{} rule for every process within the equivalence class. Hence, for every process constructed through a replacement of the restricted name of the process with a fresh one, there is also a bound transition with the new name bound in its label. This context is written down in \refLem{lem_bn_trans} which is proven by Sangiorgi and Walker in \cite{sangiorgi}.

\begin{lemma}[Bound transition \cite{sangiorgi}]
\label{lem_bn_trans}
Given names $a,b\in\names$ and processes $P,Q\in\procs$, then
\[\ec{P}\bouttrans{a}{b}\ec{Q} \text{ and } z\nin\fn{\procres{b}{P}} \text{ implies } \ec{P}\bouttrans{a}{z}\ec{Q\subs{z}{b}}\]
holds.
\end{lemma}

Since we now know that we can replace a bound name in an action by every name which is not free in the process the transition is starting from, we can extend \refConv{conv_uni_bn} for actions.

\begin{conv}[Uniqueness of bound names and transitions]
\label{conv_uni_bn_trans}
We extend \refConv{conv_uni_bn} to actions. Thus, we additionally stipulate that the bound names of some actions under consideration are different from the free names of the processes, the free names of the other actions and the names of the substitutions under consideration. Thereby, we need the limitation that for $\ec{P}\bouttrans{a}{z}\ec{Q}$ the name $z$, which is bound within the action and may be bound in $P$, is also allowed to be free in $Q$. Otherwise, scope extrusion would not be possible.
\end{conv}

We collect some more facts proved in \cite{sangiorgi}, which simplify the treatment of transitions and will be lifted to a chain of transitions in \refChap{sec_big-step_semantics}. We start by investing a connection between transitions and the free names of its processes.

\begin{lemma}[Transitions and free names \cite{sangiorgi}]
\label{lem_trans_fn}
Given names $a,b\in\names$, an action $\alpha\in\actions$ and processes $P,Q\in\procs$ with $\ec{P}\transs{\alpha}\ec{Q}$, then
\begin{align}
%\begin{array}{lcl}
\alpha=&\;\tau &\text{ implies } &&&\fn{Q}\subseteq\fn{P} \tag{TAU}\label{eq_trans_fn_tau}, \\
\alpha=&\;\inpa{a}{b}&\text{ implies } &&&a\in\fn{P} \text{ and } \fn{Q}\subseteq\fn{P}\cup\set{b} \tag{INP}\label{eq_trans_fn_inp},\\
\alpha=&\;\outa{a}{b} &\text{ implies } &&&a,b\in\fn{P} \text{ and } \fn{Q}\subseteq\fn{P} \tag{OUT}\label{eq_trans_fn_out},\\
\alpha=&\;\bouta{a}{b} &\text{ implies } &&&a\in\fn{P} \text{ and } \fn{Q}\subseteq\fn{P}\cup\set{b} \tag{BOUT}\label{eq_trans_fn_bout},
%\end{array}
\end{align}
holds.
\end{lemma}

Furthermore, we know that a transition between two processes implies that there is also a transition where an arbitrary substitution is applied to all of its components.

\begin{lemma}[Substitution on transitions (Part I) \cite{sangiorgi}]
\label{lem_subst_trans_partI}
Given processes $P,Q\in\procs$ and a substitution $\sigma$, then
	\[\text{if }\ec{P}\transs{\alpha}\ec{Q}\text{ then }\ec{P\sigma{}}\transs{\sigma(\alpha)}\ec{Q\sigma{}}\]
holds.
\end{lemma}
\begin{prf}
It is proved by an induction over the inference of $\ec{P}\transs{\alpha}\ec{Q}$. All cases apart from the \ecall{} case are proved in \cite{sangiorgi}. Thus, let $P,Q\in\procs$, $\sigma$ a substitution and $\ec{P}\transs{\alpha}\ec{Q}$ inferred by the \ecall{} rule. So we know that $\alpha=\tau$ and there is a recursive definition $\procdef{A}{\vec{w}}\define{}P'$ and some parameter $\vec{v}\subseteq\names$ such that $P=\proccall{A}{\vec{v}}$ and $Q=P'\subs{\vec{v}}{\vec{w}}$. The definition of the application of a substitution to a recursive call yields that $\proccall{A}{\vec{v}}\sigma=\proccall{A}{\vec{v}\sigma}$. Hence, with the \ecall{} rule we know $\ec{\proccall{A}{\vec{v}}\sigma}\transs{\tau}\ec{P'\subs{\vec{v}\sigma}{\vec{w}}}$. Since $\fn{P'}\subseteq{}\vec{w}$ as stipulated, we know that $\fn{P'\subs{\vec{v}}{\vec{w}}}\subseteq{}\vec{v}$ and so its the same if we apply the substitution to the parameters or to the resulting process. Hence, $\ec{\proccall{A}{\vec{v}}\sigma}\transs{\tau}\ec{\left(P'\subs{\vec{v}}{\vec{w}}\right)\sigma}$.
\end{prf}

Note that \refConv{conv_uni_bn_trans} is important for this lemma. Consider, for example, $P\define\procres{a}{\out{x}{a}.\out{x}{a}}$. Then $\ec{P}\bouttrans{x}{b}\ec{\out{x}{b}}$ and for a substitution $\sigma\define\subs{z}{b}$ \refLem{lem_subst_trans_partI} would yield that $\ec{P}=\ec{P\sigma}\bouttrans{x}{b}\ec{\out{x}{b}\sigma}=\ec{\out{x}{z}}$, since $\sigma(\bout{x}{b})=\bout{x}{b}$. But such a transition leading to $\ec{\out{x}{z}}$ does not exist. Without \refConv{conv_uni_bn_trans} we would need a side condition that in such cases $b$ is neither allowed to be within the free names of $P\sigma$ nor within the names of the substitution.

The converse of \refLem{lem_subst_trans_partI} does not hold. That is, for $\ec{P\sigma}\transs{\beta}\ec{Q'}$ we are not always able to find an action $\alpha\in\actions$ and a process $Q\in\procs$ such that $\ec{P}\transs{\alpha}\ec{Q}$ with $\sigma(\alpha)=\beta$ and $\ec{Q\sigma}=\ec{Q'}$.

Consider, for example, $P\define\procpar{\inp{a}{x}}{\out{b}{y}}$ and $\sigma\define\subs{a}{b}$. Then, on the one hand $P\sigma=\procpar{\inp{a}{x}.\proczero}{\out{a}{y}.\proczero}$ holds and so $\ec{P\sigma}\tautrans\ec{Q\sigma}$ with $Q\define\procpar{\proczero}{\proczero}$. But on the other hand there is no $\tau$ transition starting in $\ec{P}$. This is a problem as long as the application of a substitution inserts a name, which already occurs free in the process and this free name is not also replaced by the application. In this situation new possibilities for communication are established.

Furthermore, consider $P\define\inp{y}{a}.\out{x}{a}$ and $\sigma\define\subs{b}{x}$. Hence, we know that $\ec{P\sigma}=\ec{\inp{y}{a}.\out{b}{a}}\intrans{y}{x}\ec{\out{b}{x}}$ holds, but there is no way to find an action $\alpha$ and a process $Q$ such that $\ec{P}\transs{\alpha}\ec{Q}$ with $\subs{b}{x}(\alpha)=\inpa{y}{x}$ and $\ec{Q\sigma}=\ec{\out{b}{x}}$ holds, since $x$ has to be free in $\subs{b}{x}(\alpha)$ and $\ec{Q\sigma}$. This is a problem every time an input process receives a name from $\supp{\sigma}\setminus\cosupp{\sigma}$, since then this name will be replaced in the label of the transition by the application of the substitution and there is no possibility to reintegrate it, if it is not in the co-support of $\sigma$.

The first problem can be handled by adding the side condition that the substitution is \findex[substitution!injective on set]{injective} on the free names of the process under consideration. This means, for all $x,y\in\fn{P}$ if $x\neq{}y$ then $\sigma(x)\neq\sigma(y)$. Therewith, all the cases where new communications can be established due to the application of the substitution will be excluded.

The second problem is no problem in the view of the behavior of the process, since neither more communication is created nor destroyed from the substitution. The application of the substitution has just a problematic effect to the label of the transitions and the resulting process. We only can not find a suitable action for the transition, or a suitable process, since the application of the substitution replaces the needed name. Therefore, we can find a new substitution which preserves the behavior of the given substitution (behaves equal on the free names) but solves the problem with the input names, by adding those names to the substitution for reintegrating them. Thus, for example, a single substitution is getting a transposition.

This leads us to the restricted converse of \refLem{lem_subst_trans_partI}.

\begin{lemma}[Substitution on transitions (Part II) \cite{sangiorgi}]
\label{lem_subst_trans_partII}
Given a process $P\in\procs$ and a substitution $\sigma$, which is injective on $\fn{P}$. Then, there is a bijection $\rho: (\fn{P}\sigma\setminus\fn{P}) \rightarrow (\fn{P}\setminus\fn{P}\sigma)$ and with that a bijective substitution $\theta$, with
\[\theta(x)=\left\{\begin{array}{ll}
			\sigma(x) & \text{if } x\in\fn{P} \\
			\rho(x) & \text{if } x\in\fn{P}\sigma\setminus\fn{P} \\
			x & \text{if } x\nin\fn{P}\sigma\cup\fn{P}  
		\end{array}\right.\]
such that $\ec{P\sigma}=\ec{P\theta}$ and
\[\ec{P\theta}\transs{\beta}\ec{Q'} \text{ implies } \exists\alpha\in\actions,Q\in\procs:\ec{P}\transs{\alpha}\ec{Q}\]
with $\theta(\alpha)=\beta$ and $\ec{Q\theta}=\ec{Q'}$.
\end{lemma}
\begin{prf}
The second part is proved by induction over the inference of $\ec{P\theta}\transs{\beta}\ec{Q'}$. All cases apart from the \ecall{} case as well as the existence of $\rho$ are proved in \cite{sangiorgi}. Thus, let $\sigma$ be a substitution, $\theta$ as described in \refLem{lem_subst_trans_partII} and $\ec{P\theta}\transs{\beta}\ec{Q'}$ be inferred by the \ecall{} rule. Hence, $\beta=\tau$ and there is a recursive definition $\procdef{A}{\vec{w}}\define{}P'$ and a parameter list $\vec{v}\subseteq\names$ such that $P\theta=\proccall{A}{\vec{v}}$ and $Q'=P'\subs{\vec{v}}{\vec{w}}$. The application of a substitution to a process yields that the only way to reach $P\theta=\proccall{A}{\vec{v}}$ is if there is a parameter list $\vec{v'}\subseteq\names$ such that $P=\proccall{A}{\vec{v'}}$ and $\vec{v}=\vec{v'}\theta$. With the \ecall{} rule we know that $\ec{P}\transs{\tau}\ec{P'\subs{\vec{v'}}{\vec{w}}}$. Since $\fn{P'}\subseteq{\vec{w}}$ and so $\fn{P'\subs{\vec{v'}}{\vec{w}}}\subseteq{\vec{v'}}$ and \refConv{conv_uni_bn} states that no bound names of the process can occur in the substitution, we know $\ec{\left(P'\subs{\vec{v'}}{\vec{w}}\right)\theta}=\ec{P'\subs{\vec{v'}\theta}{\vec{w}}}=\ec{Q'}$. So we found an action $\alpha=\tau$ with $\theta(\alpha)=\beta$ and a process $Q=P'\subs{\vec{v'}}{\vec{w}}$ with $\ec{Q\theta}=\ec{Q'}$ and $\ec{P}\transs{\alpha}\ec{Q}$.
\end{prf}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% OLD: PROBLEM BY DEFINING INPUT ACTION BOUND %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{old}[If input bound in an action then problem with previous lemma]
Note that Lemma \ref{lem_subst_trans} would not hold, if we chose to define the bound names of an input action $\inp{a}{x}$ as $\set{x}$ and so would not replace the $x$ under a substitution. Consider, for example, $P\define\inp{a}{b}.\out{b}{z}$ and $\sigma\define\subs{x}{y}$. Then $\ec{P}\intrans{a}{x}\ec{\out{x}{z}}$ holds and if the lemma would hold, $\ec{P\sigma}=\ec{\inp{a}{b}.\out{b}{z}}\intrans{a}{x}\ec{\out{x}{z}\sigma}=\ec{\out{y}{z}}$ would also hold. But this is not true. Since we however replace the $x$ in the action we gain $\ec{\inp{a}{b}.\out{b}{z}}\intrans{a}{y}\ec{\out{y}{z}}$, which is correct.
\end{old}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% END OLD: PROBLEM BY DEFINING INPUT ACTION BOUND %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

We can think of the bijection $\rho$ as the function which gives the possibility to reintegrate the names which are replaced by $\sigma$. So, for the example above with $P\define\inp{y}{a}.\out{x}{a}$ and $\sigma\define\subs{b}{x}$, we know $\fn{P}=\set{y,x}$ and $\fn{P}\sigma=\set{y,b}$. Hence, we get a bijection $\rho:\set{b}\rightarrow\set{x}$ and so $\theta=\transp{b}{x}$. Thus, we know there is an action $\alpha\define{}\inpa{y}{b}$ and a process $Q\define{\out{x}{b}}$ such that $\ec{P}\transs{\alpha}\ec{Q}$ with $\transp{b}{x}(\alpha)=\inpa{y}{x}$ and $\ec{Q\transp{b}{x}}=\ec{\out{b}{x}}$. With this idea, we consider the special case of \refLem{lem_subst_trans_partII} where $\sigma$ is a transposition.

%\begin{old}[With substitution inside] %%%%%%%%%%%%%%%%%%%%%%%% OLD: BOTH subs and trans %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%\begin{cor}[Substitution on transitions (Part III)]
%\label{cor_subst_trans_partIII}
%Given $a,b\in\names$, $P\in\procs$ and $\sigma=\subs{a}{b}$ substitution with $a\nin\fn{P}$ or $\sigma=\transp{a}{b}$ transposition, then $\ec{P\sigma}=\ec{P\transp{a}{b}}$ and
%\[\ec{P\sigma}\transs{\beta}\ec{Q'}\text{ implies } \exists\alpha\in\actions,Q\in\procs: \ec{P}\transs{\alpha}\ec{Q}\]
%with $\transp{a}{b}(\alpha)=\beta$ and $\ec{Q\transp{a}{b}}=\ec{Q'}$.
%\end{cor}
%\begin{prf}
%Let $a,b\in\names$ and $P\in\procs$. If $\sigma$ is not directly the transposition we know since then $a\nin\fn{P}$ that $\ec{P\sigma}=\ec{P\transp{a}{b}}$.
%\begin{description}
%\item[Case $\sigma=\subs{a}{b}$, $a,b\nin\fn{P}$:] Let $\beta\in\actions,Q'\in\procs$ with $\ec{P\subs{a}{b}}\transs{\beta}\ec{Q'}$. Since $a,b\nin\fn{P}$ we know $\ec{P\subs{a}{b}}=\ec{P\transp{a}{b}}=\ec{P}$ and thus, $\ec{P}\transs{\beta}\ec{Q'}$. Let $\alpha\define{}\transp{a}{b}(\beta)$ and $Q\define{}Q'\transp{a}{b}$, with \refLem{lem_subst_trans_partI} we know $\ec{P\transp{a}{b}}\transs{\transp{a}{b}(\beta)}\ec{Q'\transp{a}{b}}$ and so, $\ec{P}\transs{\alpha}\ec{Q}$ with $\transp{a}{b}(\alpha)=\beta$ and $\ec{Q\transp{a}{b}}=\ec{Q'}$.

%\item[Case $\sigma=\subs{a}{b}$, $a\nin\fn{P}$, $b\in\fn{P}$:] Let $\beta\in\actions,Q'\in\procs$ with $\ec{P\subs{a}{b}}\transs{\beta}\ec{Q'}$. Since $a\nin\fn{P}$ and $b\in\fn{P}$, we know $\fn{P}\subs{a}{b}\setminus\fn{P}=\set{a}$ and $\fn{P}\setminus\fn{P}\subs{a}{b}=\set{b}$. Furthermore, the substitution $\subs{a}{b}$ is injective on $\fn{P}$, since $a\nin\fn{P}$ and so, with \refLem{lem_subst_trans_partII}, we know that there is a bijective substitution $\theta$, with
%\[\theta(x)=\left\{\begin{array}{ll}
%			\subs{a}{b}(x) & \text{if } x\in\fn{P} \\
%			\rho(x) & \text{if } x\in\set{a} \\
%			x & \text{else}
%		\end{array}\right.\]
%and

%\[\ec{P\theta}\transs{\beta}\ec{Q'} \text{ implies } \exists\alpha\in\actions,Q\in\procs:\ec{P}\transs{\alpha}\ec{Q}\]

%with $\theta(\alpha)=\beta$, $\ec{Q\theta}=\ec{Q'}$ and $\ec{P\subs{a}{b}}=\ec{P\theta}$ for a bijection $\rho: \set{a} \rightarrow \set{b}$. Since there is just one bijection from $\set{a}$ to $\set{b}$ and due to $b\in\fn{P},a\nin\fn{P}$, and $\subs{a}{b}$ just replaces the name $b$ for the name $a$ and behaves as identity otherwise, we know
%\[\theta(x)=\left\{\begin{array}{ll}
%			a & \text{if } x=b \\
%			b & \text{if } x=a \\
%			x & \text{else}
%		\end{array}\right.\]
%holds. Hence, $\theta=\transp{a}{b}$.

%\item[Case $\sigma=\transp{a}{b}$:] Let $\beta\in\actions,Q'\in\procs$ with $\ec{P\transp{a}{b}}\transs{\beta}\ec{Q'}$. We know a transposition is injective and so in particular injective on $\fn{P}$ and thus, the precondition of \refLem{lem_subst_trans_partII} is fulfilled.

%If $a,b\nin\fn{P}$, we know with the same argumentation as in the first case that the corollary holds for this case.

%If $a,b\in\fn{P}$ and since due to that $\fn{P}\transp{a}{b}\setminus\fn{P}=\fn{P}\setminus\fn{P}\transp{a}{b}=\emptyset$, we know from \refLem{lem_subst_trans_partII} that there is a bijection $\theta$ with
%\[\theta(x)=\left\{\begin{array}{ll}
%			\transp{a}{b}(x) & \text{if } x\in\fn{P} \\			
%			x & \text{else}
%		\end{array}\right.\]
%$\ec{P\transp{a}{b}}=\ec{P\theta}$ and
%\[\ec{P\theta}\transs{\beta}\ec{Q'} \text{ implies } \exists\alpha\in\actions,Q\in\procs:\ec{P}\transs{\alpha}\ec{Q}\]
%with $\theta(\alpha)=\beta$ and $\ec{Q\theta}=\ec{Q'}$. Since $a,b\in\fn{P}$ we know $\theta=\transp{a}{b}$ and thus, we found everything we need.

%If $a\in\fn{P}$, $b\nin\fn{P}$ and so $\fn{P}\transp{a}{b}\setminus\fn{P}=\set{b}$ and $\fn{P}\setminus\fn{P}\transp{a}{b}=\set{a}$. Since there is just one bijection $\rho:\set{b}\rightarrow\set{a}$, we know from \refLem{lem_subst_trans_partII} that there is a bijection $\theta$ with
%\[\theta(x)=\left\{\begin{array}{ll}
%			\transp{a}{b}(x) & \text{if } x\in\fn{P} \\	
%			a & \text{if } x=b	\\	
%			x & \text{else}
%		\end{array}\right.\]
%$\ec{P\transp{a}{b}}=\ec{P\theta}$ and
%\[\ec{P\theta}\transs{\beta}\ec{Q'} \text{ implies } \exists\alpha\in\actions,Q\in\procs:\ec{P}\transs{\alpha}\ec{Q}\]
%with $\theta(\alpha)=\beta$ and $\ec{Q\theta}=\ec{Q'}$. We know $\theta=\transp{a}{b}$, since $a\in\fn{P}$ and $b\nin\fn{P}$ and thus, in this case, the corollary holds.

%If $a\nin\fn{P}$ and $b\in\fn{P}$, we know with the analogous argumentation as in the prior case just with interchanging roles of the names $a$ and $b$ that this corollary holds.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% BEGIN OLD ALL IN ONE PART
%\begin{old}{Confusing all in one part}
%\begin{equation*}
%	\begin{aligned}
%		A=\left\{\begin{array}{ll}
%				\emptyset & \text{if } a,b\in\fn{P}\vee{} \\
%							&\quad{}a,b\nin\fn{P} \\
%				\set{b} & \text{if } a\in\fn{P},b\nin\fn{P} \\
%				\set{a} & \text{if } a\nin\fn{P},b\in\fn{P} 
%				\end{array}\right.
%	\end{aligned}
%	\begin{aligned}
%		B=\left\{\begin{array}{ll}
%				\emptyset & \text{if } a,b\in\fn{P}\vee{}\\
%							&\quad{}a,b\nin\fn{P} \\
%				\set{a} & \text{if } a\in\fn{P},b\nin\fn{P} \\
%				\set{b} & \text{if } a\nin\fn{P},b\in\fn{P} 
%				\end{array}\right.
%	\end{aligned}
%\end{equation*}
%holds and since a transposition is injective and so in particular injective on $\fn{P}$, we know with \refLem{lem_subst_trans_partII} that there is a bijective substitution $\theta$, with
%\[\theta(x)=\left\{\begin{array}{ll}
%			\transp{a}{b}(x) & \text{if } x\in\fn{P} \\
%			a & \text{if } x=b, a\in\fn{P}, b\nin\fn{P} \\
%			b & \text{if } x=a, a\nin\fn{P}, b\in\fn{P} \\
%			x & \text{else}
%		\end{array}\right.\]
%and $\exists\alpha\in\actions,Q\in\procs:\ec{P}\transs{\alpha}\ec{Q}$ with $\theta(\alpha)=\beta$, $\ec{Q\theta}=\ec{Q'}$ and $\ec{P\transp{a}{b}}=\ec{P\theta}$. We define $\theta'$ with
%\[\theta'(x)=\left\{\begin{array}{ll}
%			a & \text{if } x=b, a,b\nin\fn{P}\\
%			b & \text{if } x=a, a,b\nin\fn{P}\\
%			x & \text{else}
%			\end{array}\right.
%\]
%such that $\transp{a}{b}(\theta'(x))=\theta(x)$ for all $x\in\names$, since if $x\nin\fn{P}$ then $\transp{a}{b}(\theta'(x))=\transp{a}{b}(\transp{a}{b}(x))=x=\theta(x)$.
%\end{old}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% END OLD ALL IN ONE PART
%\end{description}

%Thus, for all cases we found the suitable action $\alpha\in\actions$ and process $Q\in\procs$ with the claimed properties.
%\end{prf}
%\end{old} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% END OLD: Subst and transp in one %%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{cor}[Substitution on transitions (Part III)]
\label{cor_subst_trans_partIII}
Given $a,b\in\names$, $P\in\procs$ and a transposition $\sigma=\transp{a}{b}$, then
\[\ec{P\sigma}\transs{\beta}\ec{Q'}\text{ implies } \exists\alpha\in\actions,Q\in\procs: \ec{P}\transs{\alpha}\ec{Q}\]
with $\transp{a}{b}(\alpha)=\beta$ and $\ec{Q\transp{a}{b}}=\ec{Q'}$.
\end{cor}
\begin{prf}
Let $a,b\in\names$, $P\in\procs$ and $\sigma=\transp{a}{b}$ a transposition. We know a transposition is injective and so in particular injective on $\fn{P}$ and thus, the precondition of \refLem{lem_subst_trans_partII} is fulfilled.
\begin{description}
\item[Case $a,b\nin\fn{P}$:] Let $\beta\in\actions,Q'\in\procs$ with $\ec{P\transp{a}{b}}\transs{\beta}\ec{Q'}$. Since $a,b\nin\fn{P}$ we know $\ec{P\transp{a}{b}}=\ec{P}$ and thus, $\ec{P}\transs{\beta}\ec{Q'}$. Let $\alpha\define{}\transp{a}{b}(\beta)$ and $Q\define{}Q'\transp{a}{b}$, with \refLem{lem_subst_trans_partI} we know $\ec{P\transp{a}{b}}\transs{\transp{a}{b}(\beta)}\ec{Q'\transp{a}{b}}$ and so, $\ec{P}\transs{\alpha}\ec{Q}$ with $\transp{a}{b}(\alpha)=\beta$ and $\ec{Q\transp{a}{b}}=\ec{Q'}$.

\item[Case $a\in\fn{P}$, $b\in\fn{P}$:] Since in this case $\fn{P}\transp{a}{b}\setminus\fn{P}=\emptyset$ and $\fn{P}\setminus\fn{P}\transp{a}{b}=\emptyset$ holds, we know from \refLem{lem_subst_trans_partII} that there is a bijection $\theta$ with
\[\theta(x)=\left\{\begin{array}{ll}
			\transp{a}{b}(x) & \text{if } x\in\fn{P} \\			
			x & \text{else}
		\end{array}\right.\]
$\ec{P\transp{a}{b}}=\ec{P\theta}$ and
\[\ec{P\theta}\transs{\beta}\ec{Q'} \text{ implies } \exists\alpha\in\actions,Q\in\procs:\ec{P}\transs{\alpha}\ec{Q}\]
with $\theta(\alpha)=\beta$ and $\ec{Q\theta}=\ec{Q'}$. Since $a,b\in\fn{P}$ we know $\theta=\transp{a}{b}$ and thus, we found everything we need.

\item[Case $a\in\fn{P}$, $b\nin\fn{P}$:] Thus, we know $\fn{P}\transp{a}{b}\setminus\fn{P}=\set{b}$ and $\fn{P}\setminus\fn{P}\transp{a}{b}=\set{a}$ holds. Since there is just one bijection $\rho:\set{b}\rightarrow\set{a}$, we know from \refLem{lem_subst_trans_partII} that there is a bijection $\theta$ with
\[\theta(x)=\left\{\begin{array}{ll}
			\transp{a}{b}(x) & \text{if } x\in\fn{P} \\	
			a & \text{if } x=b	\\	
			x & \text{else}
		\end{array}\right.\]
$\ec{P\transp{a}{b}}=\ec{P\theta}$ and
\[\ec{P\theta}\transs{\beta}\ec{Q'} \text{ implies } \exists\alpha\in\actions,Q\in\procs:\ec{P}\transs{\alpha}\ec{Q}\]
with $\theta(\alpha)=\beta$ and $\ec{Q\theta}=\ec{Q'}$. We know $\theta=\transp{a}{b}$, since $a\in\fn{P}$ and $b\nin\fn{P}$ and thus, in this case, the corollary holds.

\item[Case $a\nin\fn{P}$, $b\in\fn{P}$:] The argumentation is similar to the prior case by interchanging the roles of the names $a$ and $b$.
\end{description}

Thus, for all cases we found the suitable action $\alpha\in\actions$ and process $Q\in\procs$ with the claimed properties.
\end{prf}

Furthermore, we can similarly apply \refLem{lem_subst_trans_partII} to a single substitution, if the inserted name do not occur free in the process under consideration.

\begin{cor}[Substitution on transitions (Part IV)]
\label{cor_subst_trans_partIV}
Given $a,b\in\names$, $P\in\procs$ and $\sigma=\subs{a}{b}$ substitution with $a\nin\fn{P}$ then $\ec{P\sigma}=\ec{P\transp{a}{b}}$ and
\[\ec{P\sigma}\transs{\beta}\ec{Q'}\text{ implies } \exists\alpha\in\actions,Q\in\procs: \ec{P}\transs{\alpha}\ec{Q}\]
with $\transp{a}{b}(\alpha)=\beta$ and $\ec{Q\transp{a}{b}}=\ec{Q'}$.
\end{cor}
\begin{prf}
Since $a\nin\fn{P}$ and $\sigma=\subs{a}{b}$, we know that $\ec{P\sigma}=\ec{P\transp{a}{b}}$. We can now similarly prove this corollary to \refCor{cor_subst_trans_partIII}, since $\rho$ extends $\sigma$ such that for the $\theta$ of \refLem{lem_subst_trans_partII} we know $\theta=\transp{a}{b}$ holds.
\end{prf}

So, we gain the same results for on the one hand a transposition and on the other hand a substitution which only replaces one name and the co-support is no subset of the free names of the process under consideration.\index{\picalc{}|)}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Example %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsubsection{Example}
\label{sec_exp}
As examples for the \picalc{} and its semantics, we regard a system which can read and write values of and to a buffer.
\input{./images/transitionsystems/op_sem_buffer_one_cell}

\begin{example}[One cell buffer \cite{milner}] %page 84
\label{ex_one_cell_buffer}
We can define a buffer with just one cell, for example through $B_1$.
\begin{align*}
	\procdef{B_1}{in,out}&\define\inp{in}{val}.\proccall{O_1}{val,in,out} \\
	\procdef{O_1}{val,in,out}&\define\out{out}{val}.\proccall{B_1}{in,out}
\end{align*}
The buffer has one value $val$ and two channels $in$ and $out$ to write respectively read the value. Since the buffer uses recursive calls, it is always ready for a new pass, after one pass of reading and writing. Its semantics is represented in \refFig{fig_ts_buffer_one_cell}.
\end{example}

Since for every input there are countably infinite names which can be received, we use dots to visualize such alternatives in \refFig{fig_ts_buffer_one_cell}.

To extend the buffer so that it is possible to read and write more than one value, we introduce two versions of a buffer with two cells.

\begin{example}[Two cell buffer (Version I)]
\label{ex_two_cell_buffer_mine}
A buffer with two cells and some kind of FIFO strategy can possibly be modeled as $B_2$.
\begin{align*}
	\procdef{B_2}{i,o}&\define{\procchoice{\proccall{C_1}{i,o}}{\proccall{C_2}{i,o}}}  \\
	\procdef{C_1}{i,o}&\define\inp{i}{val_1}.\inp{i}{val_2}.\out{o}{val_1}.\out{o}{val_2}.\proccall{B_2}{i,o}	\\
	\procdef{C_2}{i,o}&\define\inp{i}{val_1'}.\out{o}{val_1'}.\inp{i}{val_2'}.\out{o}{val_2'}.\proccall{B_2}{i,o}	
\end{align*}
This buffer has also an input $i$ and an output $o$ channel for writing respectively reading values. The semantics of $B_2$ is visualized in \refFig{fig_ts_buffer_fifo_1}.
\end{example}

Since $\inp{i}{y}.\out{o}{a}.\out{o}{y}.\proccall{B_2}{i,o}$ and $\inp{i}{y}.\out{o}{z}.\out{o}{y}.\proccall{B_2}{i,o}$ are the same, apart from the name that had been received and this name has no influence on the communication of the process, we abbreviate the second part by the dots in \refFig{fig_ts_buffer_fifo_1}. And we know that in the second part just the first output transition is changed from $\out{o}{a}$ to $\out{o}{z}$.

It is also possible to define a FIFO buffer with two cells as a linked list.

\begin{example}[Two cell buffer (Version II)\cite{milner}] %page 85 and 95
A FIFO buffer with two cells can be defined with $FIFO$.%\todo{sangiorgi has also a two cell buffer on page 133}
\label{ex_two_cell_buffer_milner}
\begin{align*}
	\procdef{FIFO}{in,out}&\define\procres[a]{com}{\procpar{\proccall{B_3}{in,com}}{\proccall{B_3}{com,out}}}\\
	\procdef{B_3}{in,out}&\define\inp{in}{val}.\proccall{O_2}{val,in,out} \\
	\procdef{O_2}{val,in,out}&\define\out{out}{val}.\proccall{B_3}{in,out}
\end{align*}
This buffer can write the first value in one cell and, before receiving another one, it passes this value via the private channel $com$ to the other cell. A reading is just possible if the value is located in the second cell.
\end{example}

\input{./images/transitionsystems/op_sem_buffer_fifo_1}

Since the behavior of those processes -- especially of the $FIFO$ process -- is hard to determine, we introduce in \refSec{sec_de_sem_trace} a denotational semantics, which simplifies the calculation of the external behavior of a process. Furthermore, we introduce a relation which enables comparing processes on the base of the denotational semantics. Thereby, we will see, that the buffer $B_2$ and the buffer $FIFO$ have a different visible behavior.
